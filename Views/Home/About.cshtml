

@model ShortSignUpViewModel
@{
    ViewData["Title"] = "Short Sign Up";
    ViewData["ShowNav"] = true; // Assuming you want to show the navigation bar
}


@section Styles{
    <style>
        .rating-loading {
            width: 25px;
            height: 25px;
            font-size: 0;
            color: #fff;
            border: none;
        }

        .rating-container .rating-stars {
            position: relative;
            cursor: pointer;
            vertical-align: middle;
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            font-size: 25px;
            text-align: center;
        }

        .rating-container .rating-input {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 1px;
            bottom: 0;
            left: 0;
            font-size: 1px;
            border: none;
            background: 0 0;
            padding: 0;
            margin: 0;
        }

        .rating-disabled .rating-input,
        .rating-disabled .rating-stars {
            cursor: not-allowed;
        }

        .rating-container .star {
            display: inline-block;
            margin: 0 3px;
            text-align: center;
        }

        .rating-container .empty-stars {
            color: #aaa;
        }

        .rating-container .filled-stars {
            position: absolute;
            left: 0;
            top: 0;
            margin: auto;
            color: #FFD54F;
            white-space: nowrap;
            overflow: hidden;
        }

        .rating-rtl {
            float: right;
        }

            .rating-rtl .filled-stars {
                left: auto;
                right: 0;
                -moz-transform: matrix(-1, 0, 0, 1, 0, 0) translate3d(0, 0, 0);
                -webkit-transform: matrix(-1, 0, 0, 1, 0, 0) translate3d(0, 0, 0);
                -o-transform: matrix(-1, 0, 0, 1, 0, 0) translate3d(0, 0, 0);
                transform: matrix(-1, 0, 0, 1, 0, 0) translate3d(0, 0, 0);
            }

            .rating-rtl.is-star .filled-stars {
                right: .06em;
            }

            .rating-rtl.is-heart .empty-stars {
                margin-right: .07em;
            }

        .rating-lg {
            font-size: 3.91em;
            text-align: center;
        }

        /*.rating-md {
            font-size: 3.13em;
            text-align: center;
        }*/

        .rating-sm {
            font-size: 2.5em;
            text-align: center;
        }

        .rating-xs {
            font-size: 2em;
            text-align: center;
        }

        .rating-xl {
            font-size: 4.89em;
        }

        body {
            color: #000;
            overflow-x: hidden;
            height: 100%;
            background-image: linear-gradient(to right, #712c81, #FFD54F);
            background-repeat: no-repeat
        }

        .InputStyle {
            border-radius: 25px;
            border: solid 1px white;
            background: transparent;
            width: 316px;
            padding: 10px 20px
        }

        .inputplaceholder {
            font-size: 12px;
            color: white
        }

        button:focus {
            outline: none;
        }

        /*.select2-container {
            width: 250px !important;
        }*/
        /*.form-control {
            border: none;
            border-bottom: 1px solid white;
            background: none;
            color:white;
        }*/
        /*.form-control:focus {
                border: none;
                border-bottom: 1px solid white;
                background: none;
                color: white;
            }*/
        @@media (max-width: 1020px) {
            .form-control {
                font-size: 1.5rem !important;
            }

            .control-label {
                font-size: 2.5rem !important;
            }
        }

        .iti {
            display: block !important;
        }
    </style>
}
<div style="margin-top:5%"></div>
<h1 class="text-center">H E Y ,&nbsp; W E L C O M E !!!!</h1>
<div style="margin-top:5%"></div>
<form asp-controller="Applicant" asp-action="ShortSignUp" method="post" enctype="multipart/form-data" class="form-horizontal mt-4" role="form" id="ShortSignUp">
    <input type="hidden" asp-for="AssessmentCode" class="hidden" />
    <input type="hidden" asp-for="Email" />
    <div class="container mt-5">
        <div class="mt-5"></div>
        <div class="row">
            <div class="col-lg-3 offset-lg-2 offset-md-2 col-sm-10 col-md-8 mb-2 offset-sm-2">
                <input asp-for="FirstName" class="form-control" placeholder="First Name" />
                <span asp-validation-for="FirstName" class="text-white"></span>
            </div>
            <div class="col-lg-2 offset-lg-0 col-md-8 offset-md-2 col-sm-10 mb-2 offset-sm-2">
                <input asp-for="MiddleName" class="form-control" placeholder="Middle Name" />
                <span asp-validation-for="MiddleName" class="text-white"></span>
            </div>
            <div class="col-lg-3 offset-lg-0 col-md-8 offset-md-2 col-sm-10 offset-sm-2 col-12 mb-2">
                <input asp-for="LastName" class="form-control" placeholder="Last Name" />
                <span asp-validation-for="LastName" class="text-white"></span>
            </div>
        </div>
        <br />
        @*@{
            if (Model.IsCorporate)
            {*@
        <div class="row">
            <div class="col-lg-4 offset-lg-2 offset-md-2 col-sm-10 col-md-8 mb-2 offset-sm-2">

                <input asp-for="Password" required class="form-control" placeholder=" Create your own Password" />
                <span asp-validation-for="Password" class="text-white"></span>
            </div>
            <div class="col-lg-4  col-sm-10 col-md-8 mb-2">
                <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm Password" required />
                <span asp-validation-for="ConfirmPassword" class="text-white"></span>
            </div>
        </div>


        @*}
            }*@
        <br />
        <div class="row">
            <div class="col-lg-4  offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <label asp-for="DateOfBirth" class="control-label required text-white">
                    <i>We want to wish you on your birthday !</i>
                </label>
            </div>

            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                <div class="input-group">
                    <input type="text" asp-for="DateOfBirth" id="datepicker" class="form-control" readonly placeholder="Choose">
                    <span asp-validation-for="DateOfBirth" class="text-white"></span>
                </div>
            </div>
        </div>

        <br />
        <div class="row">
            <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <label asp-for="Gender" class="control-label text-white">
                    <i>Your preferred pronouns !</i>
                </label>
            </div>
            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                <select class=" form-control" asp-for="Gender" data-bind="value:gender, valueAllowUnset: true, options:genders, optionsText: 'name', optionsValue: 'id', placeholder: 'Select an option...' "></select>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <div class="form-group">
                    <label asp-for="Country" class="control-label  text-white"></label>
                </div>
            </div>
            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                <select class="form-control required" id="country" asp-for="Country" data-bind="value: country, valueAllowUnset: true, options: countries, optionsText: 'name', optionsValue: 'id'"></select>
                <span asp-validation-for="Country" class="text-white"></span>
            </div>
        </div>
        <div data-bind="visible:showLocation">
            <br />
            <div class="row" data-bind="fadeVisible: country">
                <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                    <div class="form-group">
                        <label asp-for="CurrentLocation" class="control-label required text-white"></label>
                    </div>
                </div>
                <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                    <select style="width: 100%;" asp-for="CurrentLocation" data-bind="value: location, valueAllowUnset: true, options: locations, optionsText: 'name', optionsValue: 'id', select2: { placeholder: 'Select an option...', allowClear: true}"></select>
                    <span asp-validation-for="CurrentLocation" class="text-white"></span>
                </div>
            </div>
            <div class="row" data-bind="fadeVisible: showLocationOther">
                <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                    <div class="form-group">
                        <label asp-for="CurrentLocationOther" class="control-label required text-white"></label>
                    </div>
                </div>
                <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                    <input asp-for="CurrentLocationOther" class="form-control" placeholder="Please add other location here" />
                    <span asp-validation-for="CurrentLocationOther" class="text-white"></span>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <div class="form-group">
                    <label class="text-white">What is your current/highest educational level?</label>
                </div>
            </div>
            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">

                <select asp-for="QualificationType" data-bind="value: qualificationType, valueAllowUnset: true,  options:qualificationTypes, optionsText: 'name', optionsValue: 'id'" class="form-control required"></select>
                <span class="text-white" data-valmsg-replace="true"></span>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <div class="form-group">
                    <label class="text-white">
                        What is your area of study in your current/highest level?
                    </label>
                </div>
            </div>
            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                <select asp-for="Qualification" data-bind="value: qualification, valueAllowUnset: true,  options:qualifications, optionsText: 'name', optionsValue: 'id'" class="form-control"></select>
                <span class="text-white" data-valmsg-replace="true"></span>
            </div>
        </div>

        <div class="row" data-bind="visible: showQualificationOther">
            <br />
            <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                <div class="form-group">
                    <label class="text-white">Other Degree/Certificate</label>
                </div>
            </div>
            <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                <input asp-for="QualificationOther" class="form-control" placeholder="Please add other degree/certificate here" />
                <span class="text-white" data-valmsg-replace="true"></span>

            </div>
        </div>

        @{

            if (Model != null && Model.IsPhoneNumber)
            {
                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">

                        <label asp-for="ContactNo" class="control-label text-white">
                            <i>Do share your phone number for us to send you great deals ! </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">

                        <div class="form-group">
                            <input type="text" id="contact" asp-for="ContactNo" class="form-control" placeholder="contact" />
                            <span class="text-danger" asp-validation-for="ContactNo"></span>
                        </div>
                    </div>
                </div>
            }
        }
        @if (Model != null && Model.isDocument)
        {
            <br />

            <div class="row">
                <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                    <div class="form-group">
                        <label class="control-label text-white"><i>Upload your Resume</i></label>
                    </div>
                </div>
                <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                    <div class="custom-file mb-3">
                        <input type="file" class="custom-file-input" asp-for="DocumentUrl">
                        <label class="custom-file-label" asp-for="DocumentUrl">Choose a file</label>
                        <span class="text-danger" asp-validation-for="DocumentUrl"></span>
                    </div>
                </div>
            </div>
        }

        @{
            if (Model != null && Model.IsCareergraph)
            {

                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">

                        <label asp-for="Subject" class="control-label text-white">
                            <i>Subject/Stream (if you are in class 11, 12 or PU pls select subject you want to study) </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <select class=" form-control" asp-for="Subject" data-bind="value: subject, valueAllowUnset: true, options: subjects, optionsText: 'name', optionsValue: 'id',placeholder: 'Select an option...'"></select>
                        <span asp-validation-for="Subject" class="text-white"></span>

                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">

                        <label asp-for="Subject" class="control-label text-white">
                            <i>Select your preferred Industries (Please choose top 5 Industries )</i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <select class=" form-control w-100" asp-for="Industries" data-bind="value: industry, valueAllowUnset: true, options: industries, optionsText: 'name', optionsValue: 'id', select2: { placeholder: 'Select an option...', allowClear: true}" multiple required></select>
                        <span asp-validation-for="Industries" class="text-white"></span>
                    </div>
                </div>
            }
        }
        @{
            if (Model != null && Model.IsPublicJob)
            {

                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="TotalExperience" class="control-label text-white">
                            <i>Total Experience </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <input class="form-control input-type " type="number" asp-for="TotalExperience" />

                        <span asp-validation-for="TotalExperience" class="text-white"></span>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="Role" class="control-label text-white">
                            <i>
                                Level in organisation
                                (Note: if you are not working currently, pls share information of the last held position)
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <select class=" form-control" asp-for="Role" data-bind="value: Role, valueAllowUnset: true, options: Roles, optionsText: 'name', optionsValue: 'id',placeholder: 'Select an option...'"></select>
                        <span asp-validation-for="Role" class="text-white"></span>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="WorkAtmospheres" class="control-label text-white">
                            <i>
                                Preferable Work Mode
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <select class=" form-control" asp-for="WorkAtmospheres" data-bind="value: WorkAtmosphere, valueAllowUnset: true, options: WorkAtmospheres, optionsText: 'name', optionsValue: 'id',placeholder: 'Select an option...'"></select>
                        <span asp-validation-for="WorkAtmospheres" class="text-white"></span>
                    </div>
                </div>
                <br />

                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="ReadytoRelocate" class="control-label text-white">
                            <i>
                                Open for relocation
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <input type="checkbox" style="height:25px;width:25px;" />
                        <span class="text-danger" asp-validation-for="ReadytoRelocate"></span>
                    </div>
                </div>
                <br />



                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="JobNote" class="control-label text-white">
                            <i>
                                How did you come to know about this job ? (name of consultant / website etc.)
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <input class="form-control input-type " asp-for="JobNote" />
                        <span class="text-danger" asp-validation-for="JobNote"></span>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="Salary" class="control-label text-white">
                            <i>
                                Expected Annual Salary (in INR)
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <input type="number" class="form-control input-type " asp-for="Salary" />
                        <span class="text-danger" asp-validation-for="Salary"></span>
                    </div>
                </div>
                <br />


                if (Model != null && Model.IsAadhar)
                {
                    <div class="row">
                        <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                            <div class="form-group">
                                <label class="text-white required">Aadhar No.</label>
                            </div>
                        </div>
                        <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">

                            <div class="form-group">
                                <input type="number" required asp-for="AdharNo" minlength="12" maxlength="12" class="form-control" placeholder="Please enter valid 12 digit Aadhar No" />
                                <span class="text-danger" asp-validation-for="AdharNo"></span>
                            </div>
                        </div>
                    </div>
                }

                if (Model != null && Model.IsPan)
                {
                    <div class="row">
                        <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                            <div class="form-group">
                                <label class="text-white required">Pan No.</label>
                            </div>
                        </div>
                        <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">

                            <div class="form-group">
                                <input type="text" onkeyup="this.value=this.value.toUpperCase();" asp-for="PanNo" minlength="10" maxlength="10" class="form-control" placeholder="Please enter valid 10 digit Pan No" />
                                <span class="text-danger" asp-validation-for="PanNo"></span>
                            </div>
                        </div>
                    </div>
                }

                if (Model != null && Model.HasVehicleRequired)
                {
                    <div class="row">
                        <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                            <div class="form-group">
                                <label class="text-white required">Do you have a Two wheeler / bike?</label>
                            </div>
                        </div>
                        <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">

                            <div class="form-group">
                                <input type="checkbox" asp-for="HasVehicle" style="height:25px;width:25px;" />
                                <span class="text-danger" asp-validation-for="HasVehicle"></span>
                            </div>
                        </div>
                    </div>
                }

            }
            <br />
            @*<div class="row">
                    <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                        <label asp-for="Summary" class="control-label text-white">
                            <i>
                                Summary - write about yourself (optional)
                            </i>
                        </label>
                    </div>
                    <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                        <textarea class="form-control input-type " asp-for="Summary"></textarea>
                        <span class="text-danger" asp-validation-for="Summary"></span>
                    </div>
                </div>
                <br />*@


        }
        @*@if (Model.JobSkillMapping.Count()!=0 )
            {

                for (int i = 0; i < Model.JobSkillMapping.Count(); i++)
                {
                    <div class="row">
                        <div class="col-lg-4 offset-lg-2 offset-lg-2 col-md-8 offset-md-2 col-sm-12 ">
                            <span>@Model.JobSkillMapping[i].JobSkill</span>
                            <input type="hidden" value="@Model.JobSkillMapping[i].Id" asp-for="Jobkill[i].Id">
                        </div>

                        <div class="col-lg-4 offset-lg-0 col-md-8 offset-md-2 col-sm-12">
                            <input data-bind="rating:true" asp-for="Jobkill[i].Score" class="rating rating-loading invisible" data-min="0" data-max="5" data-step="0.1" value="0.5">
                        </div>

                    </div>
                    <br />
                }

            }*@

        <div class="col-md-5 offset-md-5  p-3 col-sm-12 col-xs-12" style="display:flex">
            <button type="submit" class="btn-block btn-color-yellow w-25">Save</button>
            @*<button asp-controller="Applicant" asp-action="AssessmentCode" asp-area="Applicant" id="cancel" class="btn-color-purple w-25">Cancel</button>*@
        </div>
    </div>
</form>




@section Scripts{


    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.13.0/css/selectize.bootstrap4.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.6/js/standalone/selectize.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/js/select2.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script type="text/javascript">! function (e) {
            "use strict";
            "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof module && module.exports ? module.exports = e(require("jquery")) : e(window.jQuery)
        }(function (e) {

            "use strict";
            e.fn.ratingLocales = {}, e.fn.ratingThemes = {};
            var t, a;
            t = {
                NAMESPACE: ".rating",
                DEFAULT_MIN: 0,
                DEFAULT_MAX: 5,
                DEFAULT_STEP: .5,
                isEmpty: function (t, a) {
                    return null === t || void 0 === t || 0 === t.length || a && "" === e.trim(t)
                },
                getCss: function (e, t) {
                    return e ? " " + t : ""
                },
                addCss: function (e, t) {
                    e.removeClass(t).addClass(t)
                },
                getDecimalPlaces: function (e) {
                    var t = ("" + e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
                    return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0
                },
                applyPrecision: function (e, t) {
                    return parseFloat(e.toFixed(t))
                },
                handler: function (e, a, n, r, i) {
                    var l = i ? a : a.split(" ").join(t.NAMESPACE + " ") + t.NAMESPACE;
                    r || e.off(l), e.on(l, n)
                }
            }, a = function (t, a) {
                var n = this;
                n.$element = e(t), n._init(a)
            }, a.prototype = {
                constructor: a,
                _parseAttr: function (e, a) {
                    var n, r, i, l, s = this,
                        o = s.$element,
                        c = o.attr("type");
                    if ("range" === c || "number" === c) {
                        switch (r = a[e] || o.data(e) || o.attr(e), e) {
                            case "min":
                                i = t.DEFAULT_MIN;
                                break;
                            case "max":
                                i = t.DEFAULT_MAX;
                                break;
                            default:
                                i = t.DEFAULT_STEP
                        }
                        n = t.isEmpty(r) ? i : r, l = parseFloat(n)
                    } else l = parseFloat(a[e]);
                    return isNaN(l) ? i : l
                },
                _parseValue: function (e) {
                    var t = this,
                        a = parseFloat(e);
                    return isNaN(a) && (a = t.clearValue), !t.zeroAsNull || 0 !== a && "0" !== a ? a : null
                },
                _setDefault: function (e, a) {
                    var n = this;
                    t.isEmpty(n[e]) && (n[e] = a)
                },
                _initSlider: function (e) {
                    var a = this,
                        n = a.$element.val();
                    a.initialValue = t.isEmpty(n) ? 0 : n, a._setDefault("min", a._parseAttr("min", e)), a._setDefault("max", a._parseAttr("max", e)), a._setDefault("step", a._parseAttr("step", e)), (isNaN(a.min) || t.isEmpty(a.min)) && (a.min = t.DEFAULT_MIN), (isNaN(a.max) || t.isEmpty(a.max)) && (a.max = t.DEFAULT_MAX), (isNaN(a.step) || t.isEmpty(a.step) || 0 === a.step) && (a.step = t.DEFAULT_STEP), a.diff = a.max - a.min
                },
                _initHighlight: function (e) {
                    var t, a = this,
                        n = a._getCaption();
                    e || (e = a.$element.val()), t = a.getWidthFromValue(e) + "%", a.$filledStars.width(t), a.cache = {
                        caption: n,
                        width: t,
                        val: e
                    }
                },
                _getContainerCss: function () {
                    var e = this;
                    return "rating-container" + t.getCss(e.theme, "theme-" + e.theme) + t.getCss(e.rtl, "rating-rtl") + t.getCss(e.size, "rating-" + e.size) + t.getCss(e.animate, "rating-animate") + t.getCss(e.disabled || e.readonly, "rating-disabled") + t.getCss(e.containerClass, e.containerClass)
                },
                _checkDisabled: function () {
                    var e = this,
                        t = e.$element,
                        a = e.options;
                    e.disabled = void 0 === a.disabled ? t.attr("disabled") || !1 : a.disabled, e.readonly = void 0 === a.readonly ? t.attr("readonly") || !1 : a.readonly, e.inactive = e.disabled || e.readonly, t.attr({
                        disabled: e.disabled,
                        readonly: e.readonly
                    })
                },
                _addContent: function (e, t) {
                    var a = this,
                        n = a.$container,
                        r = "clear" === e;
                    return a.rtl ? r ? n.append(t) : n.prepend(t) : r ? n.prepend(t) : n.append(t)
                },
                _generateRating: function () {
                    var a, n, r, i = this,
                        l = i.$element;
                    n = i.$container = e(document.createElement("div")).insertBefore(l), t.addCss(n, i._getContainerCss()), i.$rating = a = e(document.createElement("div")).attr("class", "rating-stars").appendTo(n).append(i._getStars("empty")).append(i._getStars("filled")), i.$emptyStars = a.find(".empty-stars"), i.$filledStars = a.find(".filled-stars"), i._renderCaption(), i._renderClear(), i._initHighlight(), n.append(l), i.rtl && (r = Math.max(i.$emptyStars.outerWidth(), i.$filledStars.outerWidth()), i.$emptyStars.width(r)), l.appendTo(a)
                },
                _getCaption: function () {
                    var e = this;
                    return e.$caption && e.$caption.length ? e.$caption.html() : e.defaultCaption
                },
                _setCaption: function (e) {
                    var t = this;
                    t.$caption && t.$caption.length && t.$caption.html('<b>' + e + '</b>')
                },
                _renderCaption: function () {
                    var a, n = this,
                        r = n.$element.val(),
                        i = n.captionElement ? e(n.captionElement) : "";
                    if (n.showCaption) {
                        if (a = n.fetchCaption(r), i && i.length) return t.addCss(i, "caption"), i.html(a), void (n.$caption = i);
                        n._addContent("caption", '<div class="caption">' + a + "</div>"), n.$caption = n.$container.find(".caption")
                    }
                },
                _renderClear: function () {
                    var a, n = this,
                        r = n.clearElement ? e(n.clearElement) : "";
                    if (n.showClear) {
                        if (a = n._getClearClass(), r.length) return t.addCss(r, a), r.attr({
                            title: n.clearButtonTitle
                        }).html(n.clearButton), void (n.$clear = r);
                        n.$clear = n.$container.find("." + n.clearButtonBaseClass)
                    }
                },
                _getClearClass: function () {
                    var e = this;
                    return e.clearButtonBaseClass + " " + (e.inactive ? "" : e.clearButtonActiveClass)
                },
                _toggleHover: function (e) {
                    var t, a, n, r = this;
                    e && (r.hoverChangeStars && (t = r.getWidthFromValue(r.clearValue), a = e.val <= r.clearValue ? t + "%" : e.width, r.$filledStars.css("width", a)), r.hoverChangeCaption && (n = e.val <= r.clearValue ? r.fetchCaption(r.clearValue) : e.caption, n && r._setCaption(n + "")))
                },
                _init: function (t) {
                    var a, n = this,
                        r = n.$element.addClass("rating-input");
                    return n.options = t, e.each(t, function (e, t) {
                        n[e] = t
                    }), (n.rtl || "rtl" === r.attr("dir")) && (n.rtl = !0, r.attr("dir", "rtl")), n.starClicked = !1, n.clearClicked = !1, n._initSlider(t), n._checkDisabled(), n.displayOnly && (n.inactive = !0, n.showClear = !1, n.showCaption = !1), n._generateRating(), n._initEvents(), n._listen(), a = n._parseValue(r.val()), r.val(a), r.removeClass("rating-loading")
                },
                _initEvents: function () {
                    var e = this;
                    e.events = {
                        _getTouchPosition: function (a) {
                            var n = t.isEmpty(a.pageX) ? a.originalEvent.touches[0].pageX : a.pageX;
                            return n - e.$rating.offset().left
                        },
                        _listenClick: function (e, t) {
                            return e.stopPropagation(), e.preventDefault(), e.handled === !0 ? !1 : (t(e), void (e.handled = !0))
                        },
                        _noMouseAction: function (t) {
                            return !e.hoverEnabled || e.inactive || t && t.isDefaultPrevented()
                        },
                        initTouch: function (a) {
                            var n, r, i, l, s, o, c, u, d = e.clearValue || 0,
                                p = "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch;
                            p && !e.inactive && (n = a.originalEvent, r = t.isEmpty(n.touches) ? n.changedTouches : n.touches, i = e.events._getTouchPosition(r[0]), "touchend" === a.type ? (e._setStars(i), u = [e.$element.val(), e._getCaption()], e.$element.trigger("change").trigger("rating.change", u), e.starClicked = !0) : (l = e.calculate(i), s = l.val <= d ? e.fetchCaption(d) : l.caption, o = e.getWidthFromValue(d), c = l.val <= d ? o + "%" : l.width, e._setCaption(s), e.$filledStars.css("width", c)))
                        },
                        starClick: function (t) {
                            var a, n;
                            e.events._listenClick(t, function (t) {
                                return e.inactive ? !1 : (a = e.events._getTouchPosition(t), e._setStars(a), n = [e.$element.val(), e._getCaption()], e.$element.trigger("change").trigger("rating.change", n), void (e.starClicked = !0))
                            })
                        },
                        clearClick: function (t) {
                            e.events._listenClick(t, function () {
                                e.inactive || (e.clear(), e.clearClicked = !0)
                            })
                        },

                        starMouseMove: function (t) {
                            var a, n;
                            e.events._noMouseAction(t) || (e.starClicked = !1, a = e.events._getTouchPosition(t), n = e.calculate(a), e._toggleHover(n), e.$element.trigger("rating.hover", [n.val, n.caption, "stars"]))
                        },
                        starMouseLeave: function (t) {
                            var a;
                            e.events._noMouseAction(t) || e.starClicked || (a = e.cache, e._toggleHover(a), e.$element.trigger("rating.hoverleave", ["stars"]))
                        },
                        clearMouseMove: function (t) {
                            var a, n, r, i;
                            !e.events._noMouseAction(t) && e.hoverOnClear && (e.clearClicked = !1, a = '<span class="' + e.clearCaptionClass + '">' + e.clearCaption + "</span>", n = e.clearValue, r = e.getWidthFromValue(n) || 0, i = {
                                caption: a,
                                width: r,
                                val: n
                            }, e._toggleHover(i), e.$element.trigger("rating.hover", [n, a, "clear"]))
                        },
                        clearMouseLeave: function (t) {
                            var a;
                            e.events._noMouseAction(t) || e.clearClicked || !e.hoverOnClear || (a = e.cache, e._toggleHover(a), e.$element.trigger("rating.hoverleave", ["clear"]))
                        },
                        resetForm: function (t) {
                            t && t.isDefaultPrevented() || e.inactive || e.reset()
                        }
                    }
                },
                _listen: function () {
                    var a = this,
                        n = a.$element,
                        r = n.closest("form"),
                        i = a.$rating,
                        l = a.$clear,
                        s = a.events;
                    return t.handler(i, "touchstart touchmove touchend", e.proxy(s.initTouch, a)), t.handler(i, "click touchstart", e.proxy(s.starClick, a)), t.handler(i, "mousemove", e.proxy(s.starMouseMove, a)), t.handler(i, "mouseleave", e.proxy(s.starMouseLeave, a)), a.showClear && l.length && (t.handler(l, "click touchstart", e.proxy(s.clearClick, a)), t.handler(l, "mousemove", e.proxy(s.clearMouseMove, a)), t.handler(l, "mouseleave", e.proxy(s.clearMouseLeave, a))), r.length && t.handler(r, "reset", e.proxy(s.resetForm, a), !0), n
                },
                _getStars: function (e) {
                    var t, a = this,
                        n = '<span class="' + e + '-stars">';
                    for (t = 1; t <= a.stars; t++) n += '<span class="star">' + a[e + "Star"] + "</span>";
                    return n + "</span>"
                },
                _setStars: function (e) {
                    var t = this,
                        a = arguments.length ? t.calculate(e) : t.calculate(),
                        n = t.$element,
                        r = t._parseValue(a.val);
                    return n.val(r), t.$filledStars.css("width", a.width), t._setCaption(a.caption), t.cache = a, n
                },
                showStars: function (e) {
                    var t = this,
                        a = t._parseValue(e);
                    return t.$element.val(a), t._setStars()
                },
                calculate: function (e) {
                    var a = this,
                        n = t.isEmpty(a.$element.val()) ? 0 : a.$element.val(),
                        r = arguments.length ? a.getValueFromPosition(e) : n,
                        i = a.fetchCaption(r),
                        l = a.getWidthFromValue(r);
                    return l += "%", {
                        caption: i,
                        width: l,
                        val: r
                    }
                },
                getValueFromPosition: function (e) {
                    var a, n, r = this,
                        i = t.getDecimalPlaces(r.step),
                        l = r.$rating.width();
                    return n = r.diff * e / (l * r.step), n = r.rtl ? Math.floor(n) : Math.ceil(n), a = t.applyPrecision(parseFloat(r.min + n * r.step), i), a = Math.max(Math.min(a, r.max), r.min), r.rtl ? r.max - a : a
                },
                getWidthFromValue: function (e) {
                    var t, a, n = this,
                        r = n.min,
                        i = n.max,
                        l = n.$emptyStars;
                    return !e || r >= e || r === i ? 0 : (a = l.outerWidth(), t = a ? l.width() / a : 1, e >= i ? 100 : (e - r) * t * 100 / (i - r))
                },
                fetchCaption: function (e) {
                    var a, n, r, i, l, s = this,
                        o = parseFloat(e) || s.clearValue,
                        c = s.starCaptions,
                        u = s.starCaptionClasses;
                    return o && o !== s.clearValue && (o = t.applyPrecision(o, t.getDecimalPlaces(s.step))), i = "function" == typeof u ? u(o) : u[o], r = "function" == typeof c ? c(o) : c[o], n = t.isEmpty(r) ? s.defaultCaption.replace(/\{rating}/g, o) : r, a = t.isEmpty(i) ? s.clearCaptionClass : i, l = o === s.clearValue ? s.clearCaption : n, '<span class="' + a + '">' + l + "</span>"
                },
                destroy: function () {
                    var a = this,
                        n = a.$element;
                    return t.isEmpty(a.$container) || a.$container.before(n).remove(), e.removeData(n.get(0)), n.off("rating").removeClass("rating rating-input")
                },
                create: function (e) {
                    var t = this,
                        a = e || t.options || {};
                    return t.destroy().rating(a)
                },
                clear: function () {
                    var e = this,
                        t = '<span class="' + e.clearCaptionClass + '">' + e.clearCaption + "</span>";
                    return e.inactive || e._setCaption(t), e.showStars(e.clearValue).trigger("change").trigger("rating.clear")
                },
                reset: function () {
                    var e = this;
                    return e.showStars(e.initialValue).trigger("rating.reset")
                },
                update: function (e) {
                    var t = this;
                    return arguments.length ? t.showStars(e) : t.$element
                },
                refresh: function (t) {
                    var a = this,
                        n = a.$element;
                    return t ? a.destroy().rating(e.extend(!0, a.options, t)).trigger("rating.refresh") : n
                }
            }, e.fn.rating = function (n) {
                var r = Array.apply(null, arguments),
                    i = [];
                switch (r.shift(), this.each(function () {
                    var l, s = e(this),
                        o = s.data("rating"),
                        c = "object" == typeof n && n,
                        u = c.theme || s.data("theme"),
                        d = c.language || s.data("language") || "en",
                        p = {},
                        h = {};
                    o || (u && (p = e.fn.ratingThemes[u] || {}), "en" === d || t.isEmpty(e.fn.ratingLocales[d]) || (h = e.fn.ratingLocales[d]), l = e.extend(!0, {}, e.fn.rating.defaults, p, e.fn.ratingLocales.en, h, c, s.data()), o = new a(this, l), s.data("rating", o)), "string" == typeof n && i.push(o[n].apply(o, r))
                }), i.length) {
                    case 0:
                        return this;
                    case 1:
                        return void 0 === i[0] ? this : i[0];
                    default:
                        return i
                }
            }, e.fn.rating.defaults = {
                theme: "",
                language: "en",
                stars: 5,
                filledStar: '<i class="fas fa-star"></i>',
                emptyStar: '<i class="far fa-star"></i>',
                containerClass: "",
                size: "md",
                animate: !0,
                displayOnly: !1,
                rtl: !1,
                showClear: !0,
                showCaption: !0,
                starCaptionClasses: {
                    //.5: "label label-danger", 1: "label label-danger", 1.5: "label label-warning", 2: "label label-warning", 2.5: "label label-info", 3: "label label-info", 3.5: "label label-primary", 4: "label label-primary", 4.5: "label label-success", 5: "label label-success"
                },
                captionElement: null,
                clearElement: null,
                hoverEnabled: !0,
                hoverChangeCaption: !0,
                hoverChangeStars: !0,
                hoverOnClear: !0,
                zeroAsNull: !0
            }, e.fn.ratingLocales.en = {
                defaultCaption: "{rating} ",
                starCaptions: {
                    //.5: "Half ", 1: "One ", 1.5: "One & Half ", 2: "Two Stars", 2.5: "Two & Half ", 3: "Three ", 3.5: "Three & Half ", 4: "Four ", 4.5: "Four & Half ", 5: "Five "
                },
                clearButtonTitle: "Clear",
                clearCaption: "Not Rated"
            }, e.fn.rating.Constructor = a, e(document).ready(function () {
                //var t = e("input.rating");
                //t.length && t.removeClass("rating-loading").addClass("rating-loading").rating()
            })
        });</script>

    <script type="text/javascript">$(function () {
            $("#datepicker").datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,
                yearRange: '-75y:-13y',
                defaultDate: "01/01/1990"
            });
        });

          $("#contact").intlTelInput({
            initialCountry: "in",
            preferredCountries: ["in", "us", "gb"],
            autoPlaceholder: false,
            separateDialCode: true,
            formatOnDisplay: false,
            utilsScript: "../lib/intl-tel-input-16.0.0/build/js/utils.js"
        });




        var viewModel = function () {
            var self = this;
            self.documents = ko.observableArray(JSON.parse(documents));

            self.country = ko.observable('');
            self.countries = ko.observableArray([]);
            self.location = ko.observable('');
            self.locations = ko.observableArray([]);
            self.selectedLocations = ko.observableArray([]);
            self.showLocationOther = ko.observable(false);
            self.gender = ko.observable('');
            self.genders = ko.observableArray([]);
            self.qualificationType = ko.observable('');
            self.qualification = ko.observable('');
            self.grades = ko.observableArray([]);
            self.grade = ko.observable('');
            self.showQualificationOther = ko.observable(false);
            self.qualificationTypes = ko.observableArray([]);
            self.qualifications = ko.observableArray([]);
            self.HighestQualification = ko.observable(false);
            self.subjects = ko.observableArray([]);
            self.subject = ko.observable();
            self.industries = ko.observableArray([]);
            self.industry = ko.observable();
            self.TotaExperience = ko.observable('');
            self.TotaExperiences = ko.observableArray([]);
            self.Role = ko.observable('');
            self.Roles = ko.observableArray([]);
            self.WorkAtmosphere = ko.observable('');
            self.WorkAtmospheres = ko.observableArray([]);
            self.showLocationOther = ko.observable(false);
            self.showLocation = ko.observable(false);
            self.jobskill = ko.observableArray([
                { name: "Bungle", type: "Bear" },
                { name: "George", type: "Hippo" },
                { name: "Zippy", type: "Unknown" }
            ]);

            $.ajaxGet('/api/Experiences', function (data) {
                self.TotaExperiences(data);
            });

            $.ajaxGet('/api/Roles', function (data) {
                self.Roles(data);
            });

            $.ajaxGet('/api/Genders', function (data) {
                self.genders(data);
            });

            $.ajaxGet('/api/WorkAtmospheres', function (data) {
                self.WorkAtmospheres(data);
            });
            $.ajaxGet('/api/Subjects', function (data) {
                self.subjects(data);
            });
            $.ajaxGet('/api/Industries', function (data) {
                self.industries(data);
            });
            $.ajaxGet('/api/Countries', function (data) {
                data.splice(0, 0, { Id: '', Name: '' });
                self.countries(data);
                var country = self.countries().filter(function (c) {
                    return c.id === self.country();
                });

            });
            $.ajaxGet('/api/QualificationTypes', function (data) {

                data.splice(0, 0, { Id: '', Name: '' });
                self.qualificationTypes(data);
            });
            $.ajaxGet('/api/qualifications', function (data) {
                data.splice(0, 0, { Id: '', Name: '' });
                self.qualifications(data);
            });
            self.location.subscribe(function (newValue) {
                var other = self.locations().filter(function (c) {
                    return c.isOther;
                });
                self.showLocationOther(other.length > 0 && newValue === other[0].id);
            });
            self.country.subscribe(function (newValue) {
                self.showLocation(false);
                if (newValue) {
                    var country = self.countries().filter(function (c) {
                        return c.id === newValue;
                    });

                    if (country.length > 0 && country[0].code == "C063") {
                        self.showLocation(true);
                        $.ajaxGet('/api/Locations/' + country[0].code, function (data) {
                            self.locations(data);
                        });
                    }
                } else {

                    self.locations([]);
                }
            });


        }
        var viewModelObj = new viewModel();
        ko.applyBindings(viewModelObj);</script>



}
